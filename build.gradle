/*
 * Copyright (C) 2015 The Simlar Authors.
 *
 * This file is part of Simlar. (https://www.simlar.org)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

plugins {
    id "java"
    id "eclipse"
    id "idea"
    id "war"
    id "pmd"
    id "com.github.spotbugs" version "5.0.6"
    id "org.springframework.boot" version "2.6.7"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "com.github.ben-manes.versions" version "0.42.0"
    id "org.owasp.dependencycheck" version "7.1.0.1"
}

ext {
    lombokVersion = "1.18.24"
    spotbugsVersion = "4.5.3"
    mockitoVersion = "4.3.1"
}

ext['log4j2.version'] = '2.17.1'

dependencies {
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testCompileOnly("org.projectlombok:lombok:${lombokVersion}")

    compileOnly("com.github.spotbugs:spotbugs-annotations:${spotbugsVersion}")
    testCompileOnly("com.github.spotbugs:spotbugs-annotations:${spotbugsVersion}")
    spotbugs("com.github.spotbugs:spotbugs:${spotbugsVersion}")
    spotbugsPlugins("com.mebigfatguy.sb-contrib:sb-contrib:7.4.7")
    spotbugsPlugins("com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0")

    implementation("org.springframework.boot:spring-boot-starter-web-services")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.apache.commons:commons-lang3:3.12.0")
    implementation("org.apache.commons:commons-text:1.9")
    implementation("commons-codec:commons-codec:1.15")
    implementation("com.googlecode.libphonenumber:libphonenumber:8.12.47")
    implementation("com.squareup.okhttp3:okhttp:4.9.3")
    implementation("com.google.auth:google-auth-library-oauth2-http:1.6.0")

    runtimeOnly("org.mariadb.jdbc:mariadb-java-client:2.7.5")
    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")

    testImplementation("junit:junit:4.13.2")
    testImplementation("com.h2database:h2:1.4.200")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.mockito:mockito-core:${mockitoVersion}")
    testImplementation("org.mockito:mockito-inline:${mockitoVersion}")
    testImplementation("org.mock-server:mockserver-netty:5.14.0")
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
}

pmd {
    toolVersion = "6.42.0"
    ruleSetFiles = files("pmd-ruleset.xml")
    ruleSets = []
}

spotbugs {
    effort = "max"
    reportLevel = "low"
    // implemented like the documentation suggests:
    //   https://github.com/spotbugs/spotbugs-gradle-plugin#readme
    //noinspection GroovyAssignabilityCheck,GrFinalVariableAccess
    excludeFilter = file("$rootProject.projectDir/ides/spotbugs/excludeFilter.xml")
}

gradle.taskGraph.beforeTask { task ->
    if (task.name.toLowerCase().contains('spotbugs')) {
        task.reports {
            html.enabled = true
            xml.enabled = false
        }
    }
}

dependencyCheck {
    suppressionFile = "owasp-dependency-check-suppression.xml"
    failBuildOnCVSS = 0
}

//noinspection GroovyAssignabilityCheck
task dependencyChecks {
}
dependencyChecks.dependsOn dependencyCheckAnalyze
dependencyChecks.dependsOn dependencyUpdates

processResources {
    filesMatching("**/application.properties") {
        expand(project.properties)
    }
}

//noinspection GroovyMissingReturnStatement
test {
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }
}

def getGitVersion = { ->
    try {
        return "git -C ${rootDir} describe --tags --always --dirty".execute().text.trim()
    }
    catch (ignored) {
        return "git-not-found"
    }
}

version = getGitVersion()

war {
    enabled = true
    archivesBaseName = "simlar-server"
    archiveFileName = "${archivesBaseName}##${project.version}.war"
    rootSpec.exclude("application-default.properties")
    manifest {
        attributes("Implementation-Version": project.version)
    }
}

bootWar {
    classifier = 'boot'
    rootSpec.exclude("application-default.properties")
    manifest {
        attributes("Implementation-Version": project.version)
    }
}

tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

springBoot {
    buildInfo {
        properties {
            time = null
        }
    }
}

idea {
    module {
        /// IntelliJ inspection excludes
        excludeDirs += file("ides")
        excludeDirs += file("examples")
        excludeDirs += file("pmd-ruleset.xml")
        excludeDirs += file("owasp-dependency-check-suppression.xml")
        excludeDirs += file("gradlew.bat")
        excludeDirs += file("gradlew")
    }
}
